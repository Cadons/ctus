name: libtusclient CI

on:
  push:
  pull_request:
  release:
    types: [created]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        c_compiler: [gcc, clang]
        include:
          - c_compiler: gcc
            cpp_compiler: g++
            conan_home: /home/runner/.conan2
            conan_profile: /home/runner/.conan2/profiles/default
          - c_compiler: clang
            cpp_compiler: clang++
            conan_home: /home/runner/.conan2
            conan_profile: /home/runner/.conan2/profiles/default

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "build-type=release" >> "$GITHUB_OUTPUT"
            echo "test-folder=Release" >> "$GITHUB_OUTPUT"
          else
            echo "build-type=debug" >> "$GITHUB_OUTPUT"
            echo "test-folder=Debug" >> "$GITHUB_OUTPUT"
          fi

      - name: Install conan package manager
        run: |
          pip install conan
          conan --version

      - name: Cache .conan
        uses: actions/cache@v3
        with:
          path: ${{ matrix.conan_home }}
          key: ${{ runner.os }}-conan-${{ matrix.c_compiler }}-${{ steps.strings.outputs.build-type }}
          restore-keys: |
            ${{ runner.os }}-conan-${{ matrix.c_compiler }}-

      - name: Create Conan profiles
        continue-on-error: true
        run: |
          conan profile detect

      - name: Conan profile setup
        run: |
          sed -i 's/^build_type=.*/build_type=${{ steps.strings.outputs.test-folder }}/g' ${{ matrix.conan_profile }}

      - name: Install dependencies
        run: |
          conan install . --build=missing --profile=default

      - name: Configure CMake
        run: cmake --preset conan-${{ steps.strings.outputs.build-type }}

      - name: Build Library
        run: cmake --build --preset conan-${{ steps.strings.outputs.build-type }} --target libtusclient

      - name: Build Tests
        run: cmake --build --preset conan-${{ steps.strings.outputs.build-type }} --target libtusclient_test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ${{ github.workspace }}/build/${{ steps.strings.outputs.test-folder }}

  build-windows:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        c_compiler: [cl]
        include:
          - c_compiler: cl
            cpp_compiler: cl
            conan_home: C:\Users\runneradmin\.conan2
            conan_profile: C:\Users\runneradmin\.conan2\profiles\default

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "build-type=release" >> "$GITHUB_OUTPUT"
            echo "test-folder=Release" >> "$GITHUB_OUTPUT"
          else
            echo "build-type=debug" >> "$GITHUB_OUTPUT"
            echo "test-folder=Debug" >> "$GITHUB_OUTPUT"
          fi

      - name: Install conan package manager
        run: |
          pip install conan
          conan --version

      - name: Cache .conan
        uses: actions/cache@v3
        with:
          path: ${{ matrix.conan_home }}
          key: ${{ runner.os }}-conan-${{ matrix.c_compiler }}-${{ steps.strings.outputs.build-type }}
          restore-keys: |
            ${{ runner.os }}-conan-${{ matrix.c_compiler }}-

      - name: Create Conan profiles
        continue-on-error: true
        run: |
          conan profile detect

      - name: Conan profile setup
        run: |
          (Get-Content ${{ matrix.conan_profile }}) -replace '^build_type=.*', "build_type=${{ steps.strings.outputs.test-folder }}" | Set-Content ${{ matrix.conan_profile }}

      - name: Install dependencies
        run: |
          conan install . --build=missing --profile=default

      - name: Configure CMake
        run: cmake --preset conan-default

      - name: Build Library
        run: cmake --build --preset conan-${{ steps.strings.outputs.build-type }} --target libtusclient

      - name: Build Tests
        run: |
          cp ${{ github.workspace }}/build/${{ steps.strings.outputs.test-folder }}/* ${{ github.workspace }}/build/test;
          cmake --build --preset conan-${{ steps.strings.outputs.build-type }} --target libtusclient_test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ${{ github.workspace }}/build/${{ steps.strings.outputs.test-folder }}
  
  build-mac:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        c_compiler: [clang]
        include:
          - c_compiler: clang
            cpp_compiler: clang++
            conan_home: /Users/runner/.conan2
            conan_profile: /Users/runner/.conan2/profiles/default

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "build-type=release" >> "$GITHUB_OUTPUT"
            echo "test-folder=Release" >> "$GITHUB_OUTPUT"
          else
            echo "build-type=debug" >> "$GITHUB_OUTPUT"
            echo "test-folder=Debug" >> "$GITHUB_OUTPUT"
          fi

      - name: Install conan package manager
        run: |
          pip install conan
          conan --version

      - name: Cache .conan
        uses: actions/cache@v3
        with:
          path: ${{ matrix.conan_home }}
          key: ${{ runner.os }}-conan-${{ matrix.c_compiler }}-${{ steps.strings.outputs.build-type }}
          restore-keys: |
            ${{ runner.os }}-conan-${{ matrix.c_compiler }}-

      - name: Create Conan profiles
        continue-on-error: true
        run: |
          conan profile detect

      - name: Conan profile setup
        run: |
          sed -i '' 's/^build_type=.*/build_type=${{ steps.strings.outputs.test-folder }}/g' ${{ matrix.conan_profile }}

      - name: Install dependencies
        run: |
          conan install . --build=missing --profile=default

      - name: Configure CMake
        run: cmake --preset conan-${{ steps.strings.outputs.build-type }}

      - name: Build Library
        run: cmake --build --preset conan-${{ steps.strings.outputs.build-type }} --target libtusclient

      - name: Build Tests
        run: cmake --build --preset conan-${{ steps.strings.outputs.build-type }} --target libtusclient_test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ${{ github.workspace }}/build/${{ steps.strings.outputs.test-folder }}

  test:
    needs: build-linux
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ${{ github.workspace }}/build/${{ steps.strings.outputs.test-folder }}

      - name: Run Mockoon CLI
        uses: mockoon/cli-action@v2
        with:
          version: "latest"
          data-file: "./mockoon-data.json"
          port: 3000

      - name: Docker TUSD
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: docker run -d -p 8080:8080 tusproject/tusd:latest

      - name: Test Project
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
            ctest --test-dir ${{ github.workspace }}/build/${{ steps.strings.outputs.test-folder }}/test --output-on-failure --no-tests=error --output-junit ${{ github.workspace }}/build/${{ steps.strings.outputs.test-folder }}/test-results.xml
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ${{ github.workspace }}/build/${{ steps.strings.outputs.test-folder }}/test-results.xml
  release-mac:
    needs: build-mac
    if: github.event_name == 'release'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
  release-linux:
    needs: test
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ${{ github.workspace }}/build/${{ steps.strings.outputs.test-folder }}

      - name: Upload Release Artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/build/${{ steps.strings.outputs.test-folder }}
          asset_name: libtusclient-${{ steps.strings.outputs.build-type }}.zip
          asset_content_type: application/zip
  release-windows:
    needs: build-windows
    if: github.event_name == 'release'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ${{ github.workspace }}/build/${{ steps.strings.outputs.test-folder }}

      - name: Upload Release Artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/build/${{ steps.strings.outputs.test-folder }}
          asset_name: libtusclient-${{ steps.strings.outputs.build-type }}.zip
          asset_content_type: application/zip