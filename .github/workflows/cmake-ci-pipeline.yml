# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on: push

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [release]
        test_folder: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            conan_home: C:\Users\runner\.conan2
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            conan_home: /home/runner/.conan2
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            conan_home: /home/runner/.conan2
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
      - name: Cache .conan
        # Cache the .conan directory to speed up subsequent builds
        uses: actions/cache@v3
        with:
          path: ${{matrix.conan_home}}
          key: ${{ runner.os }}-conan-${{hashFiles('**/conanfile.py')}}
          restore-keys: |
            ${{ runner.os }}-conan-
      - name: Install conan package manager
        run: |
          pip install conan
          conan --version
      - name: Create Conan profiles
        continue-on-error: true
        run: |
          conan profile detect
         
      - name: Conan profile setup
        run: |
          sed 's/build_type=.*/build_type=${{ matrix.build_type }}/g' default > default

      - name: Install dependencies

        run: |
          conan install . --build=missing ;

      - name: Configure CMake (Ubuntu)
        run: cmake --preset conan-${{ matrix.build_type }}
        if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Configure CMake (Windows)
        run: cmake --preset conan-default
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Build Library
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build --preset conan-${{ matrix.build_type }} --target libtusclient
      - name: Build Tests
        run: >
          cp libtusclient.dll ${{ github.workspace }}/build
          cmake --build --preset conan-${{ matrix.build_type }} --target libtusclient_test
      

      - name: Test Project Ubuntu
        uses: threeal/ctest-action@v1.1.0
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          build-config: ${{ matrix.build_type }}
          test-dir: ${{ github.workspace }}/build/${{ matrix.test_folder }}
      - name: Test Project Windows
        uses: threeal/ctest-action@v1.1.0
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          build-config: ${{ matrix.build_type }}
          test-dir: ${{ github.workspace }}/build
