name: libtusclient CI

on:
  push:
    branches-ignore:
      - main

jobs:
  # Mockoon job to run in parallel
  start_mockoon:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Mockoon CLI
        uses: mockoon/cli-action@v2
        with:
          version: "latest"
          data-file: "./mockoon-data.json"
          port: 3000
          

  # Build and test job depends on Mockoon being ready
  build_and_test:
    runs-on: ${{ matrix.os }}
    
    # This job depends on the start_mockoon job to ensure that Mockoon is running
    needs: start_mockoon

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [debug]
        test_folder: [Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            conan_home: C:\Users\runneradmin\.conan2
            conan_profile: C:\Users\runneradmin\.conan2\profiles\default
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            conan_home: /home/runner/.conan2
            conan_profile: /home/runner/.conan2/profiles/default
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            conan_home: /home/runner/.conan2
            conan_profile: /home/runner/.conan2/profiles/default
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Cache .conan
        uses: actions/cache@v3
        with:
          path: ${{matrix.conan_home}}
          key: ${{ runner.os }}-conan-${{hashFiles('**/conanfile.py')}}-${{matrix.c_compiler}}
          restore-keys: |
            ${{ runner.os }}-conan-

      - name: Install conan package manager
        run: |
          pip install conan
          conan --version

      - name: Create Conan profiles
        continue-on-error: true
        run: |
          conan profile detect
         
      - name: Conan profile setup Linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sed -i 's/^build_type=.*/build_type=${{ matrix.test_folder }}/g' ${{matrix.conan_profile}};

      - name: Conan profile setup Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          (Get-Content ${{matrix.conan_profile}}) -replace '^build_type=.*', "build_type=${{ matrix.test_folder }}" | Set-Content ${{matrix.conan_profile}}

      - name: Install dependencies
        run: |
          conan install . --build=missing --profile=default

      - name: Configure CMake (Ubuntu)
        run: cmake --preset conan-${{ matrix.build_type }}
        if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Configure CMake (Windows)
        run: cmake --preset conan-default
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Build Library
        run: cmake --build --preset conan-${{ matrix.build_type }} --target libtusclient

      - name: Build Tests Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: cmake --build --preset conan-${{ matrix.build_type }} --target libtusclient_test
      
      - name: Build Tests Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: >
          cp ${{ github.workspace }}/build/${{matrix.test_folder}}/* ${{ github.workspace }}/build/test;
          cmake --build --preset conan-${{ matrix.build_type }} --target libtusclient_test
      
      - name: Test Project Ubuntu
        uses: threeal/ctest-action@v1.1.0
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          build-config: ${{ matrix.build_type }}
          test-dir: ${{ github.workspace }}/build/${{ matrix.test_folder }}

      - name: Test Project Windows
        uses: threeal/ctest-action@v1.1.0
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          build-config: ${{ matrix.build_type }}
          test-dir: ${{ github.workspace }}/build
