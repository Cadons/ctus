name: libtusclient CI MacOS

on:
  push:
  pull_request:
  release:
    types: [created]

jobs:
  build-mac:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        c_compiler: [clang]
        include:
          - c_compiler: clang
            cpp_compiler: clang++
            vcpkg_root: $HOME/vcpkg

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "build-type=release" >> "$GITHUB_OUTPUT"
            echo "test-folder=Release" >> "$GITHUB_OUTPUT"
          else
            echo "build-type=debug" >> "$GITHUB_OUTPUT"
            echo "test-folder=Debug" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup vcpkg
        run: |
          if [ ! -d "${{ matrix.vcpkg_root }}" ]; then
            git clone https://github.com/microsoft/vcpkg.git "${{ matrix.vcpkg_root }}"
            "${{ matrix.vcpkg_root }}/bootstrap-vcpkg.sh"
          fi

      - name: Cache vcpkg dependencies
        uses: actions/cache@v4
        with:
          path: ${{ matrix.vcpkg_root }}/installed
          key: ${{ runner.os }}-vcpkg-${{ matrix.c_compiler }}-${{ steps.strings.outputs.build-type }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ matrix.c_compiler }}-

      - name: Install dependencies with vcpkg
        run: |
          "${{ matrix.vcpkg_root }}/vcpkg" install --triplet x64-osx

      - name: Configure CMake
        run: |
          cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=${{ matrix.vcpkg_root }}/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=${{ steps.strings.outputs.build-type }}

      - name: Build Library
        run: cmake --build build --target libtusclient --config ${{ steps.strings.outputs.build-type }}

      - name: Build Tests
        run: cmake --build build --target libtusclient_test --config ${{ steps.strings.outputs.build-type }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-mac
          path: build/debug/lib/liblibtusclient.dylib

      - name: Upload artifacts for test
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-for-test-mac
          path: |
            build/debug/lib/liblibtusclient.dylib
            build/test/bin/libtusclient_test

  test-mac:
    needs: build-mac
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]

    steps:
      - name: "Create folder for test results"
        run: mkdir -p ${{ github.workspace }}/build/Debug
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-for-test-mac
          path: build/debug

      - name: Run Mockoon CLI
        uses: mockoon/cli-action@v2
        with:
          version: "latest"
          data-file: "./mockoon-data.json"
          port: 3000

      - name: Download and unzip tusd
        run: |
          curl -L -o tusd.zip https://github.com/tus/tusd/releases/download/v2.5.0/tusd_darwin_amd64.zip
          unzip tusd.zip -d tusd
          chmod +x tusd/tusd

      - name: Run tusd in background
        run: |
          nohup ./tusd/tusd -host 0.0.0.0 -port 8080 &

      - name: Test Project
        run: |
          chmod +x build/debug/bin/libtusclient_test
          export DYLD_LIBRARY_PATH=build/debug:$DYLD_LIBRARY_PATH
          build/debug/test/libtusclient_test --gtest_output=xml:build/Debug/test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: build/debug/test-results.xml

  release-mac:
    needs: test-mac
    if: github.event_name == 'release'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-mac
          path: build/${{ steps.strings.outputs.test-folder }}

      - name: Upload Release Artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/${{ steps.strings.outputs.test-folder }}
          asset_name: libtusclient-${{ steps.strings.outputs.build-type }}.zip
          asset_content_type: application/zip
