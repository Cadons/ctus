name: libtusclient CI Windows

on:
  push:
  pull_request:
  release:
    types: [created]

jobs:
  build-windows:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        c_compiler: [cl]
        include:
          - c_compiler: cl
            cpp_compiler: cl
            vcpkg_root: C:\vcpkg

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "build-type=release" >> "$GITHUB_OUTPUT"
            echo "test-folder=Release" >> "$GITHUB_OUTPUT"
          else
            echo "build-type=debug" >> "$GITHUB_OUTPUT"
            echo "test-folder=Debug" >> "$GITHUB_OUTPUT"
          fi
     
      - name: Setup vcpkg
        run: |
          if (-not (Test-Path -Path $env:vcpkg_root)) {
            git clone https://github.com/microsoft/vcpkg.git $env:vcpkg_root
            & "$env:vcpkg_root\bootstrap-vcpkg.bat"
          }

      - name: Cache vcpkg dependencies
        uses: actions/cache@v4
        with:
          path: ${{ matrix.vcpkg_root }}\installed
          key: ${{ runner.os }}-vcpkg-${{ matrix.c_compiler }}-${{ steps.strings.outputs.build-type }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ matrix.c_compiler }}-

      - name: Install dependencies with vcpkg
        run: |
          "${{ matrix.vcpkg_root }}\vcpkg.exe" install --triplet x64-windows

      - name: Configure CMake
        run: |
          cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=${{ matrix.vcpkg_root }}\scripts\buildsystems\vcpkg.cmake -DCMAKE_BUILD_TYPE=${{ steps.strings.outputs.build-type }}

      - name: Build Library
        run: cmake --build build --target libtusclient --config ${{ steps.strings.outputs.build-type }}

      - name: Build Tests
        run: cmake --build build --target libtusclient_test --config ${{ steps.strings.outputs.build-type }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-windows
          path: build/${{ steps.strings.outputs.test-folder }}/libtusclient.dll

      - name: Upload artifacts for test
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-for-test
          path: |
            build/${{ steps.strings.outputs.test-folder }}/libtusclient.dll
            build/${{ steps.strings.outputs.test-folder }}/libtusclient_test.exe

  test-windows:
    needs: build-windows
    runs-on: windows-latest
    if: github.ref_name != 'main'
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-for-test
          path: build/

      - name: Run Mockoon CLI
        uses: mockoon/cli-action@v2
        with:
          version: "latest"
          data-file: "./mockoon-data.json"
          port: 3000

      - name: Download tusd server
        run: |
          curl -L -o tusd_windows_amd64.zip https://github.com/tus/tusd/releases/download/v2.5.0/tusd_windows_amd64.zip
          mkdir tusd
          tar -xf tusd_windows_amd64.zip -C tusd

      - name: Start tusd server
        run: Start-Process -FilePath "${{ github.workspace }}\tusd\tusd_windows_amd64\tusd.exe" -ArgumentList "-port 8080 -host 0.0.0.0"

      - name: Run Tests
        run: |
          build/${{ steps.strings.outputs.test-folder }}/libtusclient_test.exe --gtest_output=xml:test-results.xml

  release-windows:
    needs: test-windows
    if: github.event_name == 'release'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build/${{ steps.strings.outputs.test-folder }}

      - name: Upload Release Artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/${{ steps.strings.outputs.test-folder }}
          asset_name: libtusclient-${{ steps.strings.outputs.build-type }}.zip
          asset_content_type: application/zip
