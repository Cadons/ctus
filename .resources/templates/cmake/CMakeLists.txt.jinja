include(cmake/common.cmake)
message(STATUS "{{ project_name}} by {{ org_name | default('UnknownOrg') }} - {{ project_version | default('1.0.0') }}")
cmake_minimum_required(VERSION {{ cmake_min_version | default("3.23") }})

project({{ project_name }}
    VERSION {{ project_version | default("1.0.0") }}
    DESCRIPTION "{{ project_description | default('Monorepo project') }}"
    LANGUAGES CXX
)

# Organization info
set(PROJECT_ORG_NAME "{{ org_name | default('UnknownOrg') }}")
set(PROJECT_ORG_URL "{{ org_url | default('https://example.com') }}")

# Prefer Ninja if not explicitly specified
{% if prefer_ninja %}
if(NOT CMAKE_GENERATOR)
    message(STATUS "No generator specified. Consider using Ninja for faster builds.")
endif()
{% endif %}

# Set C++ standard
configure_compiler({{ cpp_standard | default("23") }})

# Default build type
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the build type." FORCE)
endif()

# Enable IDE folder grouping
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Add extra cmake modules (optional)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
include(Common OPTIONAL)
include(QUtils OPTIONAL)

# Testing
include(CTest)
enable_testing()

# Version header generation
configure_file(
    ${CMAKE_SOURCE_DIR}/cmake/version.h.in
    ${CMAKE_BINARY_DIR}/generated/version.h
    @ONLY
)

# === Add subdirectories ===
{% for dir in subdirs %}
add_subdirectory({{ dir }})
{% endfor %}